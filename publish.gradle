import org.apache.commons.io.FilenameUtils

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }

}

plugins {
    id 'groovy'
    id 'application'
    id 'build-dashboard'
    id 'project-report'
    id 'jacoco'
    id 'codenarc'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    //These plugins are used to generate this tutorial
    id "org.asciidoctor.gradle.asciidoctor" version "1.5.1"
    id "org.ajoberstar.github-pages" version "1.3.0"
}

defaultTasks 'syncPublishFiles'

repositories {
    jcenter()
}

/*
 * All items below here are used for preparing the distributable tutorial.
 * You could delete everything that follows if you'd like and you'd get
 * all of the Gradle defaults
 */
asciidoctor {
    logDocuments = true
    separateOutputDirs = false
}

def sourceBrowserOutputDir = file("${reporting.baseDir}/source-browser/")

task copySourceBrowserResources(type: Sync) {
    from 'config/code-browse/'
    into file("$sourceBrowserOutputDir/resources")
}

task generateSourceBrowser(type: DefaultTask, dependsOn: copySourceBrowserResources) {
    def htmlTemplate = { title, relindex, element ->
        def rootRel = "${'../' * relindex}"[0..-2]
        """\
<html>
<head>
    <title>$title</title>
    <link rel="stylesheet" href="$rootRel/resources/highlight/styles/github.css">
    <script src="$rootRel/resources/highlight/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <style>
    code {
        font-size: 14;
        line-height: 1.2em;
    }
    </style>
</head>
<body>
<header>
    <h1>$title</h1>
    <a href="$rootRel/index.html">Back to index</a>
</header>
<hr/>
<content>
    <pre><code>
${element.file.text}
    </code></pre>
</content>
<hr/>
<footer>
<a href="$rootRel/index.html">Back to index</a>
</footer>
</body>
</html>
"""
    }

    def htmlIndexTemplate = { indexTree, mapping ->
        def index = "<ul>"
        def lastRoot = ''
        def lastDir = ''
        def openUl = 0

        indexTree.visit { element ->
            if (element.isDirectory()) {
                if (lastRoot && lastRoot != element.relativePath.segments[0]) {
                    index <<= '</ul>' * openUl
                    openUl = 0
                } else if (!"${element.relativePath}".contains(lastDir)) {
                    index <<= '</ul>'
                    openUl--
                }
                index <<= "<li>$element.name/<ul>"
                openUl++
                lastDir = "${element.relativePath}"
                lastRoot = element.relativePath.segments[0]

            } else {
                index <<= "<li><a href='${mapping.get("${element.relativePath}")}'>$element.name</a></li>"
            }
        }
        index <<= '</ul>' * openUl
        index <<= '</ul>'

        """\
<html>
<head>
<title>Code listing</title>
</head>
<body>
<header>
    <h1>Code listing</h1>
</header>
<content>
$index
</content>
<footer>
</footer>
</body>
</html>
"""
    }

    def fileMap = [ : ]

    FileTree tree = fileTree(dir: 'src')
    tree.include 'main/**/*.groovy'
    tree.include 'test/**/*.groovy'

    tree.visit { element ->
        if (!element.isDirectory()) {
            def title = FilenameUtils.getBaseName(element.name)
            def f = file("$sourceBrowserOutputDir/${element.relativePath.parent}/${title}.html")
            mkdir(f.parent)
            def relindex = element.relativePath.parent.segments.size()
            f.withWriter { writer ->
                writer.print htmlTemplate(element.name, relindex, element)
            }
            fileMap << [ "$element.relativePath": "${element.relativePath.parent}/${title}.html" ]
        }
    }

    def indexFile = file("$sourceBrowserOutputDir/index.html")
    indexFile.withWriter { writer ->
        writer.print htmlIndexTemplate(tree, fileMap)
    }
}

task prepareForPublishing(type: GradleBuild) {
    buildFile = 'build.gradle'
    tasks = [ 'buildDashboard', 'build',
              'test', 'jacoco',
              'shadowJar', 'check',
              'groovydoc', 'projectReport' ]
    mustRunAfter clean
}

task syncPublishFiles(type: Sync, dependsOn: [ prepareForPublishing, asciidoctor, generateSourceBrowser ]) {
    description 'Collates all of the required files for publishing to GitHub pages branch'
    group 'publishing'

    mustRunAfter clean
    into "$buildDir/publish-site"

    from(reporting.baseDir) {
        into 'reports'
    }
    from asciidoctor.outputDir
    from(docsDir) {
        into 'api'
    }
    from(distsDir) {
        into 'dist'
    }
    /*from(shadowJar.destinationDir) {
        include shadowJar.archiveName
        into 'dist'
    }*/
    from(projectDir) {
        includes = [ 'build.gradle',
                     'settings.gradle',
                     'gradle.properties',
                     'gradlew',
                     'gradlew.bat',
                     'gradle/**',
                     'config/**' ]
        into 'dev'
    }
    from('lib') {
        into 'dev/lib'
    }
    from('src') {
        into 'dev/src'
        exclude 'docs'
    }
    from 'LICENSE'
    from '.nojekyll'
}

//See: https://github.com/ajoberstar/gradle-git/wiki/org.ajoberstar.github-pages
//apply plugin: 'org.ajoberstar.github-pages'
githubPages {
    repoUri = 'git@github.com:groovy-tutorial/shapes-demo.git'
    pages {
        from "$buildDir/publish-site"
    }
    publishGhPages {
        dependsOn syncPublishFiles
    }
}

